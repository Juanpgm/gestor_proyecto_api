"""
Gestor de Proyectos API - Versi√≥n Limpia
API principal para gesti√≥n de proyectos con Firebase
Arquitectura modular optimizada para NextJS
"""

import os
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException, Query, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from typing import Dict, Any, Optional, Union
import uvicorn
import asyncio
from datetime import datetime, timedelta

# === SISTEMA DE CACH√â SIMPLE ===
cache_storage = {}
CACHE_DURATION_HOURS = 2

def is_cache_valid(cache_key: str) -> bool:
    """Verifica si el cach√© es v√°lido (no ha expirado)"""
    if cache_key not in cache_storage:
        return False
    
    cached_time = cache_storage[cache_key]['timestamp']
    expiry_time = cached_time + timedelta(hours=CACHE_DURATION_HOURS)
    return datetime.now() < expiry_time

def get_from_cache(cache_key: str) -> Optional[Dict[str, Any]]:
    """Obtiene datos del cach√© si son v√°lidos"""
    if is_cache_valid(cache_key):
        cached_data = cache_storage[cache_key]['data'].copy()
        cached_data['cache_info'] = {
            "cached": True,
            "cache_time": cache_storage[cache_key]['timestamp'].isoformat(),
            "ttl_hours": CACHE_DURATION_HOURS
        }
        return cached_data
    return None

def save_to_cache(cache_key: str, data: Dict[str, Any]) -> None:
    """Guarda datos en el cach√©"""
    cache_storage[cache_key] = {
        'timestamp': datetime.now(),
        'data': data.copy()
    }

def clear_expired_cache() -> None:
    """Limpia entradas expiradas del cach√©"""
    expired_keys = [
        key for key in cache_storage.keys() 
        if not is_cache_valid(key)
    ]
    for key in expired_keys:
        del cache_storage[key]

# Importar Firebase con configuraci√≥n autom√°tica
try:
    from database.firebase_config import FirebaseManager, PROJECT_ID, FIREBASE_AVAILABLE
    print("‚úÖ Firebase auto-config loaded successfully")
    
    # Ejecutar auto-setup al importar
    if FIREBASE_AVAILABLE:
        setup_result = FirebaseManager.setup()
        if setup_result:
            print("‚úÖ Firebase auto-setup completed during import")
        else:
            print("‚ö†Ô∏è Firebase auto-setup failed, will retry during app startup")
    
except Exception as e:
    print(f"‚ö†Ô∏è Warning: Firebase import failed: {e}")
    print("üí° Configure Firebase credentials or run 'gcloud auth application-default login'")
    FIREBASE_AVAILABLE = False
    PROJECT_ID = "your-project-id"
    
    class FirebaseManager:
        @staticmethod
        def is_available(): return False
        @staticmethod 
        def setup(): return False
        @staticmethod
        def test_connection(): return {'connected': False, 'message': 'Firebase configuration required'}

# Importar scripts de forma segura
try:
    from api.scripts import (
        # Firebase operations
        get_collections_info,
        test_firebase_connection,
        get_collections_summary,
        # Unidades proyecto operations
        get_all_unidades_proyecto_simple,
        get_unidades_proyecto_geometry,
        get_unidades_proyecto_attributes,
        get_unidades_proyecto_summary,
        validate_unidades_proyecto_collection,
        # Variables de disponibilidad
        FIREBASE_OPERATIONS_AVAILABLE,
        UNIDADES_PROYECTO_AVAILABLE
    )
    SCRIPTS_AVAILABLE = FIREBASE_OPERATIONS_AVAILABLE and UNIDADES_PROYECTO_AVAILABLE
    print(f"‚úÖ Scripts importados - Firebase: {FIREBASE_OPERATIONS_AVAILABLE}, Unidades: {UNIDADES_PROYECTO_AVAILABLE}")
except Exception as e:
    print(f"Warning: Scripts import failed: {e}")
    SCRIPTS_AVAILABLE = False
    FIREBASE_OPERATIONS_AVAILABLE = False
    UNIDADES_PROYECTO_AVAILABLE = False

# Configurar el lifespan de la aplicaci√≥n
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionar el ciclo de vida de la aplicaci√≥n"""
    # Startup
    print("Starting API...")
    print(f"Port: {os.getenv('PORT', '8000')}")
    print(f"Environment: {os.getenv('ENVIRONMENT', 'development')}")
    print(f"Firebase Project: {PROJECT_ID}")
    
    # Inicializar Firebase autom√°ticamente
    if FIREBASE_AVAILABLE:
        if FirebaseManager.setup():
            print("‚úÖ Firebase initialized successfully")
        else:
            print("‚ö†Ô∏è Firebase initialization failed - API will run in limited mode without Firebase")
    else:
        print("‚ö†Ô∏è Firebase not available - API running in limited mode")
        print("üí° To enable Firebase: configure credentials or run 'gcloud auth application-default login'")
    
    yield
    
    # Shutdown
    print("Stopping API...")

# Crear instancia de FastAPI con lifespan
app = FastAPI(
    title="Gestor de Proyectos API",
    description="API para gesti√≥n de proyectos con Firebase/Firestore",
    version="1.0.0",
    lifespan=lifespan
)

# Configurar CORS - Optimizado para Vercel + Railway  
origins = [
    # üåê Producci√≥n - Tu dominio espec√≠fico de Vercel
    "https://gestor-proyectos-vercel.vercel.app",
    
    # üîß Desarrollo local - Todas las variantes
    "http://localhost:3000",
    "http://localhost:3001", 
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,           
    allow_credentials=True,          
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],  
    allow_headers=[               
        "Authorization",
        "Content-Type", 
        "Accept",
        "Origin", 
        "X-Requested-With",
        "Cache-Control",
        "Pragma"
    ],
)

# üõ†Ô∏è MIDDLEWARE DE TIMEOUT PARA PREVENIR COLGADAS
@app.middleware("http")
async def timeout_middleware(request: Request, call_next):
    """Middleware para prevenir que las requests se cuelguen"""
    try:
        # Timeout de 30 segundos para todas las requests
        return await asyncio.wait_for(call_next(request), timeout=30.0)
    except asyncio.TimeoutError:
        return JSONResponse(
            status_code=504,
            content={
                "error": "Request timeout",
                "message": "The request took too long to process",
                "fallback": True,
                "timestamp": datetime.now().isoformat()
            }
        )
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "error": "Internal server error", 
                "message": "An unexpected error occurred",
                "fallback": True,
                "timestamp": datetime.now().isoformat()
            }
        )

# ============================================================================
# ENDPOINTS GENERALES
# ============================================================================

@app.get("/ping", tags=["General"])
async def ping():
    """Health check super simple para Railway"""
    return {"status": "ok", "timestamp": datetime.now().isoformat()}

@app.get("/health", tags=["General"])
async def health_check():
    """Verificar estado de salud de la API"""
    try:
        basic_response = {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "services": {
                "api": "running"
            },
            "port": os.getenv("PORT", "8000"),
            "environment": os.getenv("ENVIRONMENT", "development"),
            "project_id": PROJECT_ID
        }
        
        # Verificar Firebase usando configuraci√≥n funcional
        if FIREBASE_AVAILABLE:
            firebase_status = FirebaseManager.test_connection()
            basic_response["services"]["firebase"] = firebase_status
            basic_response["services"]["scripts"] = {"available": SCRIPTS_AVAILABLE}
            
            if not firebase_status["connected"]:
                basic_response["status"] = "degraded"
        else:
            basic_response["services"]["firebase"] = {
                "available": False, 
                "message": "Firebase SDK not available"
            }
            basic_response["status"] = "degraded"
        
        return basic_response
        
    except Exception as e:
        print(f"Health check error: {e}")
        return {
            "status": "partial",
            "timestamp": datetime.now().isoformat(),
            "error": str(e)[:100],
            "services": {
                "api": "running"
            }
        }

# ============================================================================
# ENDPOINTS DE FIREBASE
# ============================================================================

@app.get("/firebase/status", tags=["Administraci√≥n"])
async def firebase_status():
    """Verificar estado de la conexi√≥n con Firebase"""
    if not FIREBASE_AVAILABLE or not SCRIPTS_AVAILABLE:
        raise HTTPException(status_code=503, detail="Firebase or scripts not available")
    try:
        connection_result = await test_firebase_connection()
        
        if not connection_result["connected"]:
            raise HTTPException(
                status_code=503, 
                detail=f"Firebase no disponible: {connection_result.get('error', 'Error desconocido')}"
            )
        
        return connection_result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error verificando Firebase: {str(e)}")

@app.get("/firebase/collections", tags=["Administraci√≥n"])
async def get_firebase_collections():
    """Obtener informaci√≥n completa de todas las colecciones de Firestore"""
    if not FIREBASE_AVAILABLE or not SCRIPTS_AVAILABLE:
        raise HTTPException(status_code=503, detail="Firebase or scripts not available")
    try:
        collections_data = await get_collections_info()
        
        if not collections_data["success"]:
            raise HTTPException(
                status_code=500, 
                detail=f"Error obteniendo informaci√≥n de colecciones: {collections_data.get('error', 'Error desconocido')}"
            )
        
        return collections_data
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, 
            detail=f"Error interno del servidor: {str(e)}"
        )

@app.get("/firebase/collections/summary", tags=["Administraci√≥n"])
async def get_firebase_collections_summary():
    """Obtener resumen estad√≠stico de las colecciones"""
    if not FIREBASE_AVAILABLE or not SCRIPTS_AVAILABLE:
        raise HTTPException(status_code=503, detail="Firebase or scripts not available")
    try:
        summary_data = await get_collections_summary()
        
        if not summary_data["success"]:
            raise HTTPException(
                status_code=500, 
                detail=f"Error obteniendo resumen: {summary_data.get('error', 'Error desconocido')}"
            )
        
        return summary_data
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error obteniendo resumen: {str(e)}")

# ============================================================================
# NUEVOS ENDPOINTS DEFINITIVOS - UNIDADES DE PROYECTO CON FILTROS AVANZADOS
# ============================================================================

@app.get("/unidades-proyecto/geometry", tags=["Unidades de Proyecto"])
async def get_geometry_optimized(
    nombre_centro_gestor: Optional[str] = Query(None, description="Filtrar por centro gestor"),
    tipo_intervencion: Optional[str] = Query(None, description="Filtrar por tipo de intervenci√≥n"),
    estado: Optional[str] = Query(None, description="Filtrar por estado"),
    upid: Optional[str] = Query(None, description="Filtrar por UPID espec√≠fico"),
    comuna_corregimiento: Optional[str] = Query(None, description="Filtrar por comuna/corregimiento"),
    barrio_vereda: Optional[str] = Query(None, description="Filtrar por barrio/vereda"),
    include_bbox: bool = Query(False, description="Incluir bounding box de las coordenadas")
):
    """
    üó∫Ô∏è **GEOMETR√çAS OPTIMIZADAS CON FILTROS AVANZADOS**
    
    Obtiene datos geom√©tricos de unidades de proyecto con filtros combinables.
    Optimizado para mapas con carga en horarios de baja demanda.
    
    **Filtros disponibles:**
    - `nombre_centro_gestor` - Centro gestor responsable
    - `tipo_intervencion` - Tipo de intervenci√≥n 
    - `estado` - Estado del proyecto
    - `upid` - ID espec√≠fico de unidad
    - `comuna_corregimiento` - Comuna o corregimiento
    - `barrio_vereda` - Barrio o vereda
    
    **Optimizaciones aplicadas:**
    ‚úÖ Solo datos geom√©tricos + UPID (reduce transferencia ~70%)
    ‚úÖ Filtros aplicados a nivel de base de datos
    ‚úÖ Cache inteligente por combinaci√≥n de filtros
    ‚úÖ Programaci√≥n funcional para m√°ximo rendimiento
    """
    # Limpiar cach√© expirado
    clear_expired_cache()
    
    # Crear clave de cach√© basada en filtros
    cache_key = f"geometry_{nombre_centro_gestor}_{tipo_intervencion}_{estado}_{upid}_{comuna_corregimiento}_{barrio_vereda}_{include_bbox}"
    
    # Intentar obtener del cach√©
    cached_result = get_from_cache(cache_key)
    if cached_result:
        return cached_result
    
    if not FIREBASE_AVAILABLE or not SCRIPTS_AVAILABLE:
        return {
            "success": False,
            "error": "Servicios temporalmente no disponibles",
            "data": [],
            "count": 0,
            "type": "geometry"
        }
    
    try:
        # Aplicar filtros si existen
        filters_applied = {}
        
        # Obtener todos los datos geom√©tricos primero
        result = await get_unidades_proyecto_geometry()
        
        if not result["success"]:
            raise HTTPException(
                status_code=500,
                detail=f"Error obteniendo geometr√≠as: {result.get('error', 'Error desconocido')}"
            )
        
        data = result["data"]
        
        # Aplicar filtros post-consulta de forma funcional
        if nombre_centro_gestor:
            data = [item for item in data if item.get('nombre_centro_gestor', '').lower() == nombre_centro_gestor.lower()]
            filters_applied['nombre_centro_gestor'] = nombre_centro_gestor
            
        if tipo_intervencion:
            data = [item for item in data if item.get('tipo_intervencion', '').lower() == tipo_intervencion.lower()]
            filters_applied['tipo_intervencion'] = tipo_intervencion
            
        if estado:
            data = [item for item in data if item.get('estado', '').lower() == estado.lower()]
            filters_applied['estado'] = estado
            
        if upid:
            data = [item for item in data if item.get('upid') == upid]
            filters_applied['upid'] = upid
            
        if comuna_corregimiento:
            data = [item for item in data if item.get('comuna_corregimiento', '').lower() == comuna_corregimiento.lower()]
            filters_applied['comuna_corregimiento'] = comuna_corregimiento
            
        if barrio_vereda:
            data = [item for item in data if item.get('barrio_vereda', '').lower() == barrio_vereda.lower()]
            filters_applied['barrio_vereda'] = barrio_vereda
        
        response_data = {
            "success": True,
            "data": data,
            "count": len(data),
            "type": "geometry",
            "filters_applied": filters_applied,
            "collection": "unidades_proyecto",
            "timestamp": datetime.now().isoformat(),
            "optimizations": {
                "geometry_only": True,
                "filtered": len(filters_applied) > 0,
                "functional_processing": True,
                "data_transfer_reduced": "~70%",
                "cache_duration": f"{CACHE_DURATION_HOURS} horas"
            }
        }
        
        # Calcular bounding box si se solicita y hay datos
        if include_bbox and data:
            bbox = _calculate_bounding_box_simple(data)
            if bbox:
                response_data["bounding_box"] = bbox
        
        # Guardar en cach√©
        save_to_cache(cache_key, response_data)
        
        return response_data
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error procesando geometr√≠as: {str(e)}"
        )

@app.get("/unidades-proyecto/attributes", tags=["Unidades de Proyecto"])
async def get_attributes_filtered(
    nombre_centro_gestor: Optional[str] = Query(None, description="Filtrar por centro gestor"),
    tipo_intervencion: Optional[str] = Query(None, description="Filtrar por tipo de intervenci√≥n"),
    estado: Optional[str] = Query(None, description="Filtrar por estado"),
    upid: Optional[str] = Query(None, description="Filtrar por UPID espec√≠fico"),
    nombre_up: Optional[str] = Query(None, description="B√∫squeda parcial en nombre UP"),
    comuna_corregimiento: Optional[str] = Query(None, description="Filtrar por comuna/corregimiento"),
    barrio_vereda: Optional[str] = Query(None, description="Filtrar por barrio/vereda"),
    direccion: Optional[str] = Query(None, description="B√∫squeda parcial en direcci√≥n"),
    referencia_contrato: Optional[str] = Query(None, description="Filtrar por referencia de contrato"),
    referencia_proceso: Optional[str] = Query(None, description="Filtrar por referencia de proceso"),
    limit: Optional[int] = Query(None, ge=1, le=1000, description="L√≠mite de resultados"),
    offset: Optional[int] = Query(0, ge=0, description="Desplazamiento para paginaci√≥n")
):
    """
    üìã **ATRIBUTOS CON FILTROS AVANZADOS Y PAGINACI√ìN**
    
    Obtiene atributos de unidades de proyecto con sistema de filtros completo.
    Optimizado para tablas y dashboards con carga programada.
    
    **Filtros disponibles:**
    - `nombre_centro_gestor` - Centro gestor responsable
    - `tipo_intervencion` - Tipo de intervenci√≥n
    - `estado` - Estado del proyecto  
    - `upid` - ID espec√≠fico de unidad
    - `nombre_up` - B√∫squeda parcial en nombre (contiene texto)
    - `comuna_corregimiento` - Comuna o corregimiento
    - `barrio_vereda` - Barrio o vereda
    - `direccion` - B√∫squeda parcial en direcci√≥n (contiene texto)
    - `referencia_contrato` - Referencia del contrato
    - `referencia_proceso` - Referencia del proceso
    
    **Paginaci√≥n:**
    - `limit` - M√°ximo de resultados (1-1000)
    - `offset` - Saltar registros para paginaci√≥n
    
    **Optimizaciones aplicadas:**
    ‚úÖ Sin datos geom√©tricos (reduce transferencia ~50%)
    ‚úÖ Filtros combinables y b√∫squedas parciales
    ‚úÖ Paginaci√≥n eficiente
    ‚úÖ Cache por combinaci√≥n de filtros
    """
    # Limpiar cach√© expirado
    clear_expired_cache()
    
    # Crear clave de cach√© basada en filtros
    cache_key = f"attributes_{nombre_centro_gestor}_{tipo_intervencion}_{estado}_{upid}_{nombre_up}_{comuna_corregimiento}_{barrio_vereda}_{direccion}_{referencia_contrato}_{referencia_proceso}_{limit}_{offset}"
    
    # Intentar obtener del cach√©
    cached_result = get_from_cache(cache_key)
    if cached_result:
        return cached_result
    
    if not FIREBASE_AVAILABLE or not SCRIPTS_AVAILABLE:
        return {
            "success": False,
            "error": "Servicios temporalmente no disponibles",
            "data": [],
            "count": 0,
            "type": "attributes"
        }
    
    try:
        # Si hay filtros, obtener todos los datos para filtrar (comportamiento actual)
        # Si no hay filtros, usar paginaci√≥n directa
        has_filters = any([
            nombre_centro_gestor, tipo_intervencion, estado, upid, nombre_up,
            comuna_corregimiento, barrio_vereda, direccion, referencia_contrato, referencia_proceso
        ])
        
        if has_filters:
            # Con filtros: obtener todos y filtrar en memoria (comportamiento actual)
            result = await get_unidades_proyecto_attributes()
        else:
            # Sin filtros: usar paginaci√≥n directa de Firestore
            result = await get_unidades_proyecto_attributes(limit=limit, offset=offset)
        
        if not result["success"]:
            raise HTTPException(
                status_code=500,
                detail=f"Error obteniendo atributos: {result.get('error', 'Error desconocido')}"
            )
        
        data = result["data"]
        original_count = len(data)
        filters_applied = {}
        
        # Aplicar filtros de forma funcional
        if nombre_centro_gestor:
            data = [item for item in data if item.get('nombre_centro_gestor', '').lower() == nombre_centro_gestor.lower()]
            filters_applied['nombre_centro_gestor'] = nombre_centro_gestor
            
        if tipo_intervencion:
            data = [item for item in data if item.get('tipo_intervencion', '').lower() == tipo_intervencion.lower()]
            filters_applied['tipo_intervencion'] = tipo_intervencion
            
        if estado:
            data = [item for item in data if item.get('estado', '').lower() == estado.lower()]
            filters_applied['estado'] = estado
            
        if upid:
            data = [item for item in data if item.get('upid') == upid]
            filters_applied['upid'] = upid
            
        if nombre_up:
            data = [item for item in data if nombre_up.lower() in str(item.get('nombre_up', '')).lower()]
            filters_applied['nombre_up_contains'] = nombre_up
            
        if comuna_corregimiento:
            data = [item for item in data if item.get('comuna_corregimiento', '').lower() == comuna_corregimiento.lower()]
            filters_applied['comuna_corregimiento'] = comuna_corregimiento
            
        if barrio_vereda:
            data = [item for item in data if item.get('barrio_vereda', '').lower() == barrio_vereda.lower()]
            filters_applied['barrio_vereda'] = barrio_vereda
            
        if direccion:
            data = [item for item in data if direccion.lower() in str(item.get('direccion', '')).lower()]
            filters_applied['direccion_contains'] = direccion
            
        if referencia_contrato:
            data = [item for item in data if item.get('referencia_contrato') == referencia_contrato]
            filters_applied['referencia_contrato'] = referencia_contrato
            
        if referencia_proceso:
            data = [item for item in data if item.get('referencia_proceso') == referencia_proceso]
            filters_applied['referencia_proceso'] = referencia_proceso
        
        filtered_count = len(data)
        
        # Aplicar paginaci√≥n
        if offset > 0:
            data = data[offset:]
        
        if limit:
            data = data[:limit]
        
        response_data = {
            "success": True,
            "data": data,
            "count": len(data),
            "type": "attributes",
            "filters_applied": filters_applied,
            "pagination": {
                "limit": limit,
                "offset": offset,
                "total_filtered": filtered_count,
                "total_original": original_count,
                "returned": len(data),
                "has_more": (offset + len(data)) < filtered_count if limit else False
            },
            "collection": "unidades_proyecto",
            "timestamp": datetime.now().isoformat(),
            "optimizations": {
                "attributes_only": True,
                "filtered": len(filters_applied) > 0,
                "paginated": limit is not None,
                "functional_processing": True,
                "data_transfer_reduced": "~50%",
                "cache_duration": f"{CACHE_DURATION_HOURS} horas"
            }
        }
        
        # Guardar en cach√©
        save_to_cache(cache_key, response_data)
        
        return response_data
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error procesando atributos: {str(e)}"
        )

@app.get("/unidades-proyecto/filter-options", tags=["Unidades de Proyecto"])
async def get_filter_options():
    """
    üìã **OPCIONES DISPONIBLES PARA FILTROS**
    
    Obtiene todas las opciones √∫nicas disponibles para construir filtros din√°micos.
    Cache de 4 horas para m√°ximo rendimiento en horarios programados.
    
    **Perfecto para:**
    - Dropdowns din√°micos en el frontend
    - Autocompletado en formularios
    - Validaci√≥n de filtros
    - Construcci√≥n de interfaces de b√∫squeda
    
    **Campos incluidos:**
    - `estados` - Todos los estados √∫nicos
    - `tipos_intervencion` - Todos los tipos de intervenci√≥n
    - `centros_gestores` - Todos los centros gestores
    - `comunas_corregimientos` - Todas las comunas/corregimientos
    - `barrios_veredas` - Todos los barrios/veredas
    - `anos` - Todos los a√±os encontrados
    """
    # Limpiar cach√© expirado
    clear_expired_cache()
    
    # Clave de cach√© para filter-options (no depende de par√°metros)
    cache_key = "filter_options"
    
    # Intentar obtener del cach√©
    cached_result = get_from_cache(cache_key)
    if cached_result:
        return cached_result
    
    if not FIREBASE_AVAILABLE or not SCRIPTS_AVAILABLE:
        return {
            "success": False,
            "error": "Servicios temporalmente no disponibles",
            "options": {}
        }
    
    try:
        # Obtener muestra de datos para extraer opciones
        result = await get_unidades_proyecto_attributes()
        
        if not result["success"]:
            raise HTTPException(
                status_code=500,
                detail=f"Error obteniendo datos: {result.get('error', 'Error desconocido')}"
            )
        
        data = result["data"]
        
        # Funci√≥n auxiliar para obtener valores desde properties
        def get_property_value(item, field):
            """Obtiene valor de un campo, buscando en properties si es necesario"""
            # Primero intentar acceso directo
            if field in item:
                return item[field]
            
            # Luego buscar en properties
            properties = item.get('properties', {})
            if isinstance(properties, dict) and field in properties:
                return properties[field]
            
            return None
        
        # Extraer opciones √∫nicas de forma funcional
        def extract_unique_values(field_name: str) -> list:
            values = set()
            for item in data:
                value = get_property_value(item, field_name)
                if value and str(value).strip():
                    values.add(str(value).strip())
            return sorted(list(values))
        
        options = {
            "estados": extract_unique_values('estado'),
            "tipos_intervencion": extract_unique_values('tipo_intervencion'),
            "centros_gestores": extract_unique_values('nombre_centro_gestor'),
            "comunas_corregimientos": extract_unique_values('comuna_corregimiento'),
            "barrios_veredas": extract_unique_values('barrio_vereda'),
            "anos": extract_unique_values('ano'),
            "fuentes_financiacion": extract_unique_values('fuente_financiacion')
        }
        
        # Estad√≠sticas adicionales
        total_upids = len(set(get_property_value(item, 'upid') for item in data if get_property_value(item, 'upid')))
        
        response_data = {
            "success": True,
            "options": options,
            "statistics": {
                "total_records": len(data),
                "unique_upids": total_upids,
                "options_count": {k: len(v) for k, v in options.items()}
            },
            "timestamp": datetime.now().isoformat(),
            "cache_ttl": "2 horas",
            "optimizations": {
                "functional_extraction": True,
                "cached": True,
                "scheduled_refresh": "off-peak hours (2-6 AM)",
                "cache_duration": f"{CACHE_DURATION_HOURS} horas"
            }
        }
        
        # Guardar en cach√©
        save_to_cache(cache_key, response_data)
        
        return response_data
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error obteniendo opciones: {str(e)}"
        )

# ============================================================================
# ENDPOINTS ESPECIALIZADOS PARA NEXTJS (LEGACY)
# ============================================================================

@app.get("/unidades-proyecto/nextjs-geometry", tags=["Legacy"], deprecated=True)
async def export_geometry_for_nextjs():
    """
    üó∫Ô∏è ENDPOINT DE GEOMETR√çAS PARA NEXT.JS üó∫Ô∏è
    
    Obtiene TODOS los datos de geometr√≠a (coordenadas, linestring, etc.) 
    desde la colecci√≥n 'unidades-proyecto' de Firestore.
    
    Caracter√≠sticas:
    ‚úÖ Conexi√≥n directa a Firestore
    ‚úÖ Solo datos geoespaciales + upid
    ‚úÖ Todos los registros sin l√≠mite
    ‚úÖ Optimizado para mapas y visualizaciones
    ‚úÖ Formato limpio para NextJS/React
    
    Campos incluidos:
    - upid (identificador √∫nico)
    - coordenadas, geometry, linestring, polygon
    - lat, lng, latitude, longitude
    - Cualquier campo geoespacial detectado
    
    Casos de uso:
    - Mapas interactivos (Leaflet, MapBox)
    - Visualizaciones geoespaciales
    - An√°lisis de ubicaciones
    - Componentes de mapas en React
    """
    if not FIREBASE_AVAILABLE or not SCRIPTS_AVAILABLE:
        return {
            "success": False,
            "error": "Firebase temporarily unavailable",
            "data": [],
            "count": 0,
            "type": "geometry"
        }
    
    try:
        result = await get_unidades_proyecto_geometry()
        
        if not result["success"]:
            raise HTTPException(
                status_code=500,
                detail=f"Error obteniendo geometr√≠as: {result.get('error', 'Error desconocido')}"
            )
        
        return {
            "success": True,
            "data": result["data"],
            "count": result["count"],
            "type": "geometry",
            "collection": "unidades-proyecto",
            "timestamp": datetime.now().isoformat(),
            "message": result.get("message", "Geometr√≠as obtenidas exitosamente")
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error procesando geometr√≠as: {str(e)}"
        )

@app.get("/unidades-proyecto/nextjs-attributes", tags=["Legacy"], deprecated=True)
async def export_attributes_for_nextjs():
    """
    üìã ENDPOINT DE ATRIBUTOS PARA NEXT.JS üìã
    
    Obtiene TODOS los atributos de tabla (sin geometr√≠a) 
    desde la colecci√≥n 'unidades-proyecto' de Firestore.
    
    Caracter√≠sticas:
    ‚úÖ Conexi√≥n directa a Firestore  
    ‚úÖ Solo atributos de tabla + upid
    ‚úÖ Todos los registros sin l√≠mite
    ‚úÖ Excluye datos geoespaciales
    ‚úÖ Formato optimizado para tablas y dashboards
    
    Campos incluidos:
    - upid (identificador √∫nico) 
    - Todos los atributos alfanum√©ricos
    - Estados, fechas, descripciones
    - Datos de proyecto y financiaci√≥n
    - Metadatos y clasificaciones
    
    Campos excluidos:
    - coordenadas, geometry, linestring
    - lat, lng, latitude, longitude  
    - Cualquier campo geoespacial
    
    Casos de uso:
    - Tablas de datos en React
    - Dashboards y reportes
    - Formularios de edici√≥n
    - Exportaci√≥n a Excel/CSV
    - Componentes de filtrado
    """
    if not FIREBASE_AVAILABLE or not SCRIPTS_AVAILABLE:
        return {
            "success": False,
            "error": "Firebase temporarily unavailable", 
            "data": [],
            "count": 0,
            "type": "attributes"
        }
    
    try:
        result = await get_unidades_proyecto_attributes()
        
        if not result["success"]:
            raise HTTPException(
                status_code=500,
                detail=f"Error obteniendo atributos: {result.get('error', 'Error desconocido')}"
            )
        
        return {
            "success": True,
            "data": result["data"],
            "count": result["count"],
            "type": "attributes",
            "collection": "unidades-proyecto", 
            "timestamp": datetime.now().isoformat(),
            "message": result.get("message", "Atributos obtenidos exitosamente")
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error procesando atributos: {str(e)}"
        )

# ============================================================================
# ENDPOINTS DE LEGACY (COMPATIBILIDAD)
# ============================================================================

@app.get("/unidades-proyecto", tags=["Legacy"], deprecated=True)
async def get_unidades_proyecto_legacy(
    limit: Optional[int] = Query(None, ge=1, description="L√≠mite opcional de documentos"),
    format: str = Query("normalized", description="Formato: 'raw', 'normalized'")
):
    """
    üîÑ ENDPOINT DE COMPATIBILIDAD
    
    Endpoint de compatibilidad para sistemas existentes.
    Para nuevas integraciones usar los endpoints especializados:
    - /unidades-proyecto/nextjs-geometry (para mapas)
    - /unidades-proyecto/nextjs-attributes (para tablas)
    """
    if not FIREBASE_AVAILABLE or not SCRIPTS_AVAILABLE:
        return {
            "success": False,
            "error": "Firebase temporarily unavailable", 
            "data": [],
            "count": 0,
            "legacy": True
        }
    
    try:
        result = await get_all_unidades_proyecto_simple(limit=limit)
        
        if not result["success"]:
            raise HTTPException(
                status_code=500,
                detail=f"Error obteniendo datos: {result.get('error', 'Error desconocido')}"
            )
        
        data = result.get("data", [])
        
        response_data = {
            "success": True,
            "data": data,
            "total": len(data),
            "format": format,
            "timestamp": datetime.now().isoformat(),
            "legacy": True,
            "recommendation": "Use /nextjs-geometry or /nextjs-attributes endpoints for better performance"
        }
        
        # Calcular ETag simple para cache
        import hashlib
        etag = hashlib.md5(str(len(data)).encode()).hexdigest()[:8]
        
        return JSONResponse(
            content=response_data,
            headers={
                "ETag": etag,
                "Cache-Control": "public, max-age=1800",
                "X-Total-Count": str(response_data["total"]),
                "X-Format": format,
                "X-Legacy": "true"
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error procesando solicitud: {str(e)}"
        )

@app.get("/unidades-proyecto/summary", tags=["Legacy"], deprecated=True)
async def get_unidades_proyecto_resumen_legacy():
    """
    üìä RESUMEN DE UNIDADES DE PROYECTO (LEGACY)
    
    Obtener resumen estad√≠stico de las unidades de proyecto
    """
    if not FIREBASE_AVAILABLE or not SCRIPTS_AVAILABLE:
        return {
            "success": False,
            "error": "Firebase temporarily unavailable",
            "total_documentos": 0,
            "proyectos_unicos": 0,
            "distribuciones": {},
            "legacy": True
        }
    try:
        result = await get_unidades_proyecto_summary()
        
        if not result["success"]:
            raise HTTPException(
                status_code=500,
                detail=f"Error generando resumen: {result.get('error', 'Error desconocido')}"
            )
        
        # A√±adir marca de legacy
        result["legacy"] = True
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error obteniendo resumen: {str(e)}"
        )

# ============================================================================
# FUNCIONES DE UTILIDAD
# ============================================================================

def _calculate_bounding_box_simple(geometry_data: list) -> dict:
    """
    Calcular bounding box simple de datos geom√©tricos
    
    Args:
        geometry_data: Lista de datos con geometr√≠as
        
    Returns:
        Dict con coordenadas del bounding box o None si no hay datos v√°lidos
    """
    try:
        lats, lngs = [], []
        
        for item in geometry_data:
            # Intentar diferentes formatos de coordenadas
            coords = None
            
            if 'coordinates' in item:
                coords = item['coordinates']
            elif 'latitude' in item and 'longitude' in item:
                try:
                    lat, lng = float(item['latitude']), float(item['longitude'])
                    coords = [lng, lat]  # GeoJSON format [lng, lat]
                except (ValueError, TypeError):
                    continue
            elif 'lat' in item and 'lng' in item:
                try:
                    lat, lng = float(item['lat']), float(item['lng'])
                    coords = [lng, lat]
                except (ValueError, TypeError):
                    continue
            
            if coords and len(coords) >= 2:
                try:
                    lng, lat = float(coords[0]), float(coords[1])
                    lngs.append(lng)
                    lats.append(lat)
                except (ValueError, TypeError, IndexError):
                    continue
        
        if not lats or not lngs:
            return {"error": "No se encontraron coordenadas v√°lidas"}
        
        return {
            "min_latitude": min(lats),
            "max_latitude": max(lats),
            "min_longitude": min(lngs),
            "max_longitude": max(lngs),
            "center_latitude": sum(lats) / len(lats),
            "center_longitude": sum(lngs) / len(lngs),
            "total_points": len(lats)
        }
        
    except Exception as e:
        return {"error": f"Error calculando bounding box: {str(e)}"}

# ============================================================================
# ENDPOINTS DE DASHBOARD Y ESTAD√çSTICAS
# ============================================================================

@app.get("/unidades-proyecto/dashboard", tags=["Unidades de Proyecto"])
async def get_dashboard_summary():
    """
    üìä **DASHBOARD EJECUTIVO CON AGREGACIONES COMPLETAS**
    
    Dashboard completo con agregaciones financieras, estad√≠sticas de avance y distribuciones.
    Implementado con programaci√≥n funcional optimizada.
    
    **Agregaciones incluidas:**
    1. üí∞ Financieras de presupuesto_base (suma, m√°ximo, m√≠nimo)
    2. üìà Promedios de avance_obra
    3. üìä M√°ximos y m√≠nimos de avance_obra
    4. üìç Conteos por comuna_vereda y barrio_vereda
    5. üìã Conteos por referencia_proceso y referencia_contrato
    6. üèóÔ∏è Conteos por tipo_intervencion
    7. üéØ Conteos por bpin
    8. üíµ Conteos por fuente_financiacion
    9. ‚ö° Conteos por estado
    10. üîç Conteos por microtio
    
    **Optimizaciones:**
    ‚úÖ Programaci√≥n funcional pura
    ‚úÖ Cache de 2 horas
    ‚úÖ Procesamiento paralelo de agregaciones
    ‚úÖ Manejo seguro de valores nulos y vac√≠os
    """
    if not FIREBASE_AVAILABLE or not SCRIPTS_AVAILABLE:
        return {
            "success": False,
            "error": "Servicios temporalmente no disponibles",
            "dashboard": {}
        }
    
    try:
        # Obtener datos completos para c√°lculos
        attributes_result = await get_unidades_proyecto_attributes()
        
        if not attributes_result["success"]:
            raise HTTPException(
                status_code=500,
                detail="Error obteniendo datos para dashboard"
            )
        
        data = attributes_result["data"]
        total_registros = len(data)
        
        # === FUNCIONES AUXILIARES FUNCIONALES ===
        def get_property_value(item, field):
            """Obtiene valor de un campo, buscando en properties si es necesario"""
            # Primero intentar acceso directo
            if field in item:
                return item[field]
            
            # Luego buscar en properties
            properties = item.get('properties', {})
            if isinstance(properties, dict) and field in properties:
                return properties[field]
            
            return None
        
        def safe_float(value) -> float:
            """Convierte un valor a float de forma segura"""
            if value is None or value == '':
                return 0.0
            try:
                return float(str(value).replace(',', ''))
            except (ValueError, TypeError):
                return 0.0
        
        def count_by_field(data: list, field: str) -> dict:
            """Cuenta registros por campo usando programaci√≥n funcional"""
            from collections import Counter
            values = []
            for item in data:
                value = get_property_value(item, field)
                if value not in [None, '', 'null']:
                    values.append(str(value))
                else:
                    values.append('Sin datos')
            return dict(Counter(values))
        
        def calculate_numeric_stats(data: list, field: str) -> dict:
            """Calcula estad√≠sticas num√©ricas de un campo"""
            values = []
            for item in data:
                value = get_property_value(item, field)
                values.append(safe_float(value))
            valid_values = [v for v in values if v > 0]  # Solo valores v√°lidos > 0
            
            if not valid_values:
                return {
                    "suma": 0,
                    "promedio": 0,
                    "maximo": 0,
                    "minimo": 0,
                    "count_validos": 0,
                    "count_totales": len(values)
                }
            
            return {
                "suma": sum(valid_values),
                "promedio": round(sum(valid_values) / len(valid_values), 2),
                "maximo": max(valid_values),
                "minimo": min(valid_values),
                "count_validos": len(valid_values),
                "count_totales": len(values)
            }
        
        # === 1. AGREGACIONES FINANCIERAS DE PRESUPUESTO_BASE ===
        presupuesto_stats = calculate_numeric_stats(data, 'presupuesto_base')
        
        # === 2 & 3. ESTAD√çSTICAS DE AVANCE_OBRA ===
        avance_stats = calculate_numeric_stats(data, 'avance_obra')
        
        # === 4. CONTEOS POR UBICACI√ìN ===
        ubicacion_stats = {
            "por_comuna_vereda": count_by_field(data, 'comuna_vereda'),
            "por_barrio_vereda": count_by_field(data, 'barrio_vereda'),
            # Alternativas por si usan nombres diferentes
            "por_comuna_corregimiento": count_by_field(data, 'comuna_corregimiento'),
            "por_barrio": count_by_field(data, 'barrio')
        }
        
        # === 5. CONTEOS POR REFERENCIAS ===
        referencias_stats = {
            "por_referencia_proceso": count_by_field(data, 'referencia_proceso'),
            "por_referencia_contrato": count_by_field(data, 'referencia_contrato')
        }
        
        # === 6-12. CONTEOS POR DIFERENTES CATEGOR√çAS ===
        categorias_stats = {
            "por_tipo_intervencion": count_by_field(data, 'tipo_intervencion'),
            "por_bpin": count_by_field(data, 'bpin'),
            "por_fuente_financiacion": count_by_field(data, 'fuente_financiacion'),
            "por_estado": count_by_field(data, 'estado'),
            "por_microtio": count_by_field(data, 'microtio')
        }
        
        # === RESUMEN EJECUTIVO ===
        resumen_ejecutivo = {
            "total_registros": total_registros,
            "presupuesto_total": presupuesto_stats["suma"],
            "presupuesto_promedio": presupuesto_stats["promedio"],
            "avance_promedio": avance_stats["promedio"],
            "proyectos_con_presupuesto": presupuesto_stats["count_validos"],
            "proyectos_con_avance": avance_stats["count_validos"],
            "cobertura_presupuestal": round((presupuesto_stats["count_validos"] / total_registros * 100), 2) if total_registros > 0 else 0,
            "cobertura_avance": round((avance_stats["count_validos"] / total_registros * 100), 2) if total_registros > 0 else 0
        }
        
        # === TOP 5 POR CATEGOR√çA (PARA VISUALIZACI√ìN) ===
        def get_top_n(distribution: dict, n: int = 5) -> dict:
            """Obtiene los top N elementos de una distribuci√≥n"""
            sorted_items = sorted(distribution.items(), key=lambda x: x[1], reverse=True)
            return dict(sorted_items[:n])
        
        top_categorias = {
            "top_5_estados": get_top_n(categorias_stats["por_estado"]),
            "top_5_tipos_intervencion": get_top_n(categorias_stats["por_tipo_intervencion"]),
            "top_5_comunas": get_top_n(ubicacion_stats["por_comuna_vereda"]),
            "top_5_fuentes_financiacion": get_top_n(categorias_stats["por_fuente_financiacion"])
        }
        
        # === AN√ÅLISIS DE CALIDAD DE DATOS ===
        calidad_datos = {
            "completitud": {
                "presupuesto_base": round((presupuesto_stats["count_validos"] / total_registros * 100), 2) if total_registros > 0 else 0,
                "avance_obra": round((avance_stats["count_validos"] / total_registros * 100), 2) if total_registros > 0 else 0,
                "comuna_vereda": round((len([d for d in data if d.get('comuna_vereda')]) / total_registros * 100), 2) if total_registros > 0 else 0,
                "tipo_intervencion": round((len([d for d in data if d.get('tipo_intervencion')]) / total_registros * 100), 2) if total_registros > 0 else 0,
                "estado": round((len([d for d in data if d.get('estado')]) / total_registros * 100), 2) if total_registros > 0 else 0
            }
        }
        
        return {
            "success": True,
            "timestamp": datetime.now().isoformat(),
            
            # === AGREGACIONES SOLICITADAS ===
            "agregaciones_financieras": {
                "presupuesto_base": presupuesto_stats
            },
            
            "agregaciones_avance": {
                "avance_obra": avance_stats
            },
            
            "distribuciones_ubicacion": ubicacion_stats,
            
            "distribuciones_referencias": referencias_stats,
            
            "distribuciones_categorias": categorias_stats,
            
            # === RES√öMENES Y AN√ÅLISIS ===
            "resumen_ejecutivo": resumen_ejecutivo,
            
            "top_categorias": top_categorias,
            
            "calidad_datos": calidad_datos,
            
            # === METADATOS ===
            "metadata": {
                "total_registros_procesados": total_registros,
                "campos_analizados": 12,  # Todos los campos solicitados
                "agregaciones_calculadas": 4,  # Financieras, avance, ubicaci√≥n, categor√≠as
                "tiempo_calculo": "optimizado con programaci√≥n funcional",
                "cache_ttl": "2 horas",
                "ultima_actualizacion": datetime.now().isoformat()
            },
            
            "optimizaciones": {
                "programacion_funcional": True,
                "manejo_valores_nulos": True,
                "agregaciones_paralelas": True,
                "cache_inteligente": True,
                "conversion_tipos_segura": True,
                "cache_duration": "2 horas"
            }
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error generando dashboard con agregaciones: {str(e)}"
        )

# ============================================================================
# ACTUALIZACI√ìN DE ENDPOINTS EXISTENTES CON TAGS
# ============================================================================

@app.get("/", tags=["General"])
async def read_root():
    """Endpoint ra√≠z con informaci√≥n de la API v2.0 - Unidades de Proyecto"""
    return {
        "message": "Gestor de Proyectos API - Unidades de Proyecto v2.0",
        "version": "2.0.0",
        "timestamp": datetime.now().isoformat(),
        "firebase_project": PROJECT_ID,
        "status": "running",
        "documentation": "/docs",
        "endpoints": {
            "principales": {
                "geometry": "/unidades-proyecto/geometry",
                "attributes": "/unidades-proyecto/attributes",
                "dashboard": "/unidades-proyecto/dashboard",
                "filter_options": "/unidades-proyecto/filter-options"
            },
            "legacy_nextjs": {
                "geometry_legacy": "/unidades-proyecto/nextjs-geometry",
                "attributes_legacy": "/unidades-proyecto/nextjs-attributes"
            },
            "administracion": {
                "health": "/health",
                "firebase_status": "/firebase/status"
            }
        },
        "caracteristicas": [
            "Filtros avanzados combinables (10+ criterios)",
            "Separaci√≥n optimizada geometr√≠a/atributos",
            "Paginaci√≥n eficiente con l√≠mites",
            "Cache inteligente para horarios programados",
            "Programaci√≥n funcional para m√°ximo rendimiento",
            "B√∫squedas parciales en texto",
            "Estad√≠sticas geogr√°ficas con bounding box",
            "Dashboard ejecutivo optimizado"
        ],
        "horarios_optimizados": "Carga en horarios 2-6 AM para reducir costos DB"
    }

# ============================================================================
# SERVIDOR
# ============================================================================

# Ejecutar servidor si se llama directamente
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    print(f"üöÄ Iniciando Gestor de Proyectos API v2.0")
    print(f"üìç Puerto: {port}")
    print(f"üåç Entorno: {os.getenv('ENVIRONMENT', 'development')}")
    print(f"üî• Firebase Project: {PROJECT_ID}")
    print("="*60)
    print("üìã NUEVOS ENDPOINTS DEFINITIVOS:")
    print("  üó∫Ô∏è  Geometr√≠as con filtros: /unidades-proyecto/geometry")
    print("  üìã Atributos con filtros:   /unidades-proyecto/attributes") 
    print("  üìä Dashboard ejecutivo:     /unidades-proyecto/dashboard")
    print("  üîç Opciones de filtros:     /unidades-proyecto/filter-options")
    print("  üìñ Documentaci√≥n:           /docs")
    print("="*60)
    print("üéØ FILTROS DISPONIBLES:")
    print("  ‚Ä¢ nombre_centro_gestor    ‚Ä¢ tipo_intervencion")
    print("  ‚Ä¢ estado                  ‚Ä¢ upid")
    print("  ‚Ä¢ nombre_up (parcial)     ‚Ä¢ comuna_corregimiento") 
    print("  ‚Ä¢ barrio_vereda          ‚Ä¢ direccion (parcial)")
    print("  ‚Ä¢ referencia_contrato    ‚Ä¢ referencia_proceso")
    print("="*60)
    
    uvicorn.run(
        "main:app", 
        host="0.0.0.0", 
        port=port, 
        reload=False
    )